@model CalculateViewModel
@{
    ViewData["input"] = Model.OriginalFormula;
}
<div class="formulaContainer">
    <div class="form-group">
        <label for="properFormat">Logic Format</label>
        <input disabled="" class="form-control" id="properFormat" value="@Model.Logic">
    </div>
</div>

<div class="formulaContainer">
    <div class="form-group">
        <label for="nandify">Nandify</label>
        <input disabled="" class="form-control" id="nandify" value="@Model.Nandify">
    </div>
</div>
@if (Model.Arguments.Length > 0)
{
    <div class="formulaContainer">
        <div class="form-group">
            <label for="hex">Hex</label>
            <input disabled="" class="form-control" id="hex" value="@Model.Hex">
        </div>
    </div>
    
    <div id="truthTableContainer">
        <div class="left truthTable">
            <h5>Thruth table</h5>
            <table class="table table-striped">
                <thead class="thead-dark">
                <tr>
                    @for (var i = 0; i < Model.Arguments.Length; i++)
                    {
                        <th scope="col">@Model.Arguments[i]</th>
                    }
                    <th scope="col">Result</th>
                </tr>
                </thead>
                <tbody>
                @for (var i = 0; i < Model.TruthTable.Length; i++)
                {
                    <tr>
                        @for (var j = 0; j < Model.TruthTable[i].Length; j++)
                        {
                            <td>
                                @Model.TruthTable[i][j]
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="right truthTable table-sm">
            <h5>Simplified Thruth table</h5>
            <table class="table table-striped">
                <thead class="thead-dark">
                <tr>
                    @for (var i = 0; i < Model.Arguments.Length; i++)
                    {
                        <th scope="col">@Model.Arguments[i]</th>
                    }
                    <th scope="col">Result</th>
                </tr>
                </thead>
                <tbody>
                @for (var i = 0; i < Model.SimplifiedTruthTable.Length; i++)
                {
                    <tr>
                        @for (var j = 0; j < Model.SimplifiedTruthTable[i].Length; j++)
                        {
                            <td>
                                @(Model.SimplifiedTruthTable[i][j] == 2 ? '*' : (Model.SimplifiedTruthTable[i][j] == 0 ? '0' : '1'))
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="formulaContainer">
        <div class="form-group">
            <label for="normalize">Normalize</label>
            <input disabled="" class="form-control" id="normalize" value="@Model.Normalize">
            <hr/>
            <label for="normalizeLogic">Normalize Logic Format</label>
            <input disabled="" class="form-control" id="normalizeLogic" value="@Model.NormalizeLogicFormat">
        </div>
    </div>

}
<div class="formulaContainer">
    <div class="form-group">
        <label for="snormalize">Simplified Normalize</label>
        <input disabled="" class="form-control" id="snormalize" value="@Model.SimplifiedNormalize">
        <hr/>
        <label for="normalizeLogic">Simplified Normalize Logic Format</label>
        <input disabled="" class="form-control" id="normalizeLogic" value="@Model.SimplifiedNormalizeLogicFormat">
    </div>
</div>